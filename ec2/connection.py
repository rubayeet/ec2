"""
ec2.connection
~~~~~~~~~~~~~~

:copyright: (c) 2014 by Matt Robenolt.
:license: BSD, see LICENSE for more details.
"""

import os
import boto.ec2

_connection = None


def get_connection():
    "Cache a global connection object to be used by all classes"
    global _connection
    if _connection is None:
        _connection = boto.ec2.connect_to_region(**credentials())
    return _connection


class credentials(object):
    """
    Simple credentials singleton that holds our fun AWS info
    and masquerades as a dict
    """
    ACCESS_KEY_ID = None
    SECRET_ACCESS_KEY = None
    REGION_NAME = 'us-east-1'

    def keys(self):
        return ['aws_access_key_id', 'aws_secret_access_key', 'region_name']

    def __getitem__(self, item):
        item = item.upper()
        return os.environ.get(item) or getattr(self, item, None) or getattr(self, item[4:])

    @classmethod
    def from_file(cls, filename):
        """
        Load ACCESS_KEY_ID and SECRET_ACCESS_KEY from csv
        generated by Amazon's IAM.

        >>> ec2.credentials.from_file('credentials.csv')
        """
        import csv
        with open(filename, 'r') as f:
            reader = csv.DictReader(f)
            row = reader.next()  # Only one row in the file
        try:
            cls.ACCESS_KEY_ID = row['Access Key Id']
            cls.SECRET_ACCESS_KEY = row['Secret Access Key']
        except KeyError:
            raise IOError('Invalid credentials format')

    @classmethod
    def from_botoconfig(cls, fail_silently=False):
        """
        Load ACCESS_KEY_ID, SECRET_ACCESS_KEY and REGION_NAME from Boto Config 
        file: http://boto.readthedocs.org/en/latest/boto_config_tut.html
        """
        import ConfigParser
        try:
            cfg = ConfigParser.ConfigParser()
            cfg.read(['/etc/boto', os.path.expanduser('~/.boto')])
            cls.ACCESS_KEY_ID = cfg.get('Credentials', 'aws_access_key_id')
            cls.SECRET_ACCESS_KEY = cfg.get('Credentials', 'aws_secret_access_key')

            if cfg.has_option('Boto', 'ec2_region_name'):
                cls.REGION_NAME = cls.get('Boto', 'ec2_region_name')
        except ConfigParser.Error:
            #TODO - handle specific errors, provide helpful messages
            if not fail_silently:
                raise
